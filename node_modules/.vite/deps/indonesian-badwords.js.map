{
  "version": 3,
  "sources": ["../../indonesian-badwords/src/dict.json", "../../indonesian-badwords/src/main.js"],
  "sourcesContent": ["[\n    \"ancuk\",\n    \"ancok\",\n    \"ajig\",\n    \"anjay\",\n    \"anjing\",\n    \"anying\",\n    \"anjir\",\n    \"asu\",\n    \"asyu\",\n    \"babangus\",\n    \"babi\",\n    \"bacol\",\n    \"bacot\",\n    \"bagong\",\n    \"bajingan\",\n    \"balegug\",\n    \"banci\",\n    \"bangke\",\n    \"bangsat\",\n    \"bedebah\",\n    \"bedegong\",\n    \"bego\",\n    \"belegug\",\n    \"beloon\",\n    \"bencong\",\n    \"bloon\",\n    \"blo'on\",\n    \"bodoh\",\n    \"boloho\",\n    \"buduk\",\n    \"budug\",\n    \"celeng\",\n    \"cibai\",\n    \"cibay\",\n    \"cocot\",\n    \"cocote\",\n    \"cok\",\n    \"cokil\",\n    \"colai\",\n    \"colay\",\n    \"coli\",\n    \"colmek\",\n    \"conge\",\n    \"congean\",\n    \"congek\",\n    \"congor\",\n    \"cuk\",\n    \"cukima\",\n    \"cukimai\",\n    \"cukimay\",\n    \"dancok\",\n    \"entot\",\n    \"entotan\",\n    \"ewe\",\n    \"ewean\",\n    \"gelo\",\n    \"genjik\",\n    \"germo\",\n    \"gigolo\",\n    \"goblo\",\n    \"goblog\",\n    \"goblok\",\n    \"hencet\",\n    \"henceut\",\n    \"heunceut\",\n    \"homo\",\n    \"idiot\",\n    \"itil\",\n    \"jancuk\",\n    \"jancok\",\n    \"jablay\",\n    \"jalang\",\n    \"jembut\",\n    \"jiancok\",\n    \"jilmek\",\n    \"jurig\",\n    \"kacung\",\n    \"kampang\",\n    \"kampret\",\n    \"kampungan\",\n    \"kehed\",\n    \"kenthu\",\n    \"kentot\",\n    \"kentu\",\n    \"keparat\",\n    \"kimak\",\n    \"kintil\",\n    \"kirik\",\n    \"kunyuk\",\n    \"kurap\",\n    \"konti\",\n    \"kontol\",\n    \"kopet\",\n    \"koplok\",\n    \"lacur\",\n    \"lebok\",\n    \"lonte\",\n    \"maho\",\n    \"meki\",\n    \"memek\",\n    \"monyet\",\n    \"ndas\",\n    \"ndasmu\",\n    \"ngehe\",\n    \"ngentot\",\n    \"nggateli\",\n    \"nyepong\",\n    \"ngewe\",\n    \"ngocok\",\n    \"pante\",\n    \"pantek\", \n    \"patek\",\n    \"pathek\",\n    \"peju\",\n    \"pejuh\",\n    \"pecun\",\n    \"pecundang\",\n    \"pelacur\",\n    \"pelakor\",\n    \"peler\",\n    \"pepek\",\n    \"puki\",\n    \"pukima\",\n    \"pukimae\",\n    \"pukimak\",\n    \"pukimay\",\n    \"sampah\",\n    \"sepong\",\n    \"sial\",\n    \"sialan\",\n    \"silit\",\n    \"sinting\",\n    \"sontoloyo\",\n    \"tai\",\n    \"taik\",\n    \"tempek\",\n    \"tempik\",\n    \"tete\",\n    \"tetek\",\n    \"tiembokne\",\n    \"titit\",\n    \"toket\",\n    \"tolol\",\n    \"ublag\",\n    \"udik\",\n    \"wingkeng\"\n]   ", "module.exports = { \n    dict: require('./dict.json'),\n    flag(text) { \n        if (!text) throw new Error('empty string passed')  \n        if (typeof text !== 'string') throw new Error('string expected')\n\n        return this.dict.some(word => text.toLowerCase().includes(word))\n    },\n    badwords(text) {\n        if (!text) throw new Error('empty string passed')  \n        if (typeof text !== 'string') throw new Error('string expected') \n\n        return this.dict.filter(word => text.toLowerCase().includes(word))\n    },\n    filter(text) {\n        if (!text) throw new Error('empty string passed')  \n        if (typeof text !== 'string') throw new Error('string expected') \n\n        const regex = new RegExp(`\\\\b(${this.dict.join('|')})\\\\b`, 'gi')\n        return text.replace(regex, '')\n    },\n    censor(text, replacement = '***') { \n        if (!text) throw new Error('empty string passed')  \n        if (typeof text !== 'string') throw new Error('string expected')\n \n        const regex = new RegExp(`\\\\b(${this.dict.join('|')})\\\\b`, 'gi')\n        return text.replace(regex, replacement)\n    },\n    analyze(text) { \n        if (!text) throw new Error('empty string passed') \n        if (typeof text !== 'string') throw new Error('string expected')\n         \n        const badwords = this.dict.filter(word => text.toLowerCase().includes(word)) \n        const words = text.split(' ') \n        const count = badwords.length  \n        const locations = badwords.map(word => {\n            const index = text.toLowerCase().indexOf(word)\n            return {\n                word,\n                index\n            }\n        }) \n        const censored = this.censor(text) \n         \n        return {\n            text,\n            words: words.length,\n            censored: censored,\n            badwords,\n            count, \n            locations\n        }\n    }\n}"],
  "mappings": ";;;;;AAAA;AAAA;AAAA;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA;AAAA;;;ACnJA;AAAA;AAAA,WAAO,UAAU;AAAA,MACb,MAAM;AAAA,MACN,KAAK,MAAM;AACP,YAAI,CAAC,KAAM,OAAM,IAAI,MAAM,qBAAqB;AAChD,YAAI,OAAO,SAAS,SAAU,OAAM,IAAI,MAAM,iBAAiB;AAE/D,eAAO,KAAK,KAAK,KAAK,UAAQ,KAAK,YAAY,EAAE,SAAS,IAAI,CAAC;AAAA,MACnE;AAAA,MACA,SAAS,MAAM;AACX,YAAI,CAAC,KAAM,OAAM,IAAI,MAAM,qBAAqB;AAChD,YAAI,OAAO,SAAS,SAAU,OAAM,IAAI,MAAM,iBAAiB;AAE/D,eAAO,KAAK,KAAK,OAAO,UAAQ,KAAK,YAAY,EAAE,SAAS,IAAI,CAAC;AAAA,MACrE;AAAA,MACA,OAAO,MAAM;AACT,YAAI,CAAC,KAAM,OAAM,IAAI,MAAM,qBAAqB;AAChD,YAAI,OAAO,SAAS,SAAU,OAAM,IAAI,MAAM,iBAAiB;AAE/D,cAAM,QAAQ,IAAI,OAAO,OAAO,KAAK,KAAK,KAAK,GAAG,CAAC,QAAQ,IAAI;AAC/D,eAAO,KAAK,QAAQ,OAAO,EAAE;AAAA,MACjC;AAAA,MACA,OAAO,MAAM,cAAc,OAAO;AAC9B,YAAI,CAAC,KAAM,OAAM,IAAI,MAAM,qBAAqB;AAChD,YAAI,OAAO,SAAS,SAAU,OAAM,IAAI,MAAM,iBAAiB;AAE/D,cAAM,QAAQ,IAAI,OAAO,OAAO,KAAK,KAAK,KAAK,GAAG,CAAC,QAAQ,IAAI;AAC/D,eAAO,KAAK,QAAQ,OAAO,WAAW;AAAA,MAC1C;AAAA,MACA,QAAQ,MAAM;AACV,YAAI,CAAC,KAAM,OAAM,IAAI,MAAM,qBAAqB;AAChD,YAAI,OAAO,SAAS,SAAU,OAAM,IAAI,MAAM,iBAAiB;AAE/D,cAAM,WAAW,KAAK,KAAK,OAAO,UAAQ,KAAK,YAAY,EAAE,SAAS,IAAI,CAAC;AAC3E,cAAM,QAAQ,KAAK,MAAM,GAAG;AAC5B,cAAM,QAAQ,SAAS;AACvB,cAAM,YAAY,SAAS,IAAI,UAAQ;AACnC,gBAAM,QAAQ,KAAK,YAAY,EAAE,QAAQ,IAAI;AAC7C,iBAAO;AAAA,YACH;AAAA,YACA;AAAA,UACJ;AAAA,QACJ,CAAC;AACD,cAAM,WAAW,KAAK,OAAO,IAAI;AAEjC,eAAO;AAAA,UACH;AAAA,UACA,OAAO,MAAM;AAAA,UACb;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA;",
  "names": []
}
