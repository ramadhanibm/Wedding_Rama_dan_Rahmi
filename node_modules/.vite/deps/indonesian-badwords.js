import {
  __commonJS
} from "./chunk-V4OQ3NZ2.js";

// node_modules/indonesian-badwords/src/dict.json
var require_dict = __commonJS({
  "node_modules/indonesian-badwords/src/dict.json"(exports, module) {
    module.exports = [
      "ancuk",
      "ancok",
      "ajig",
      "anjay",
      "anjing",
      "anying",
      "anjir",
      "asu",
      "asyu",
      "babangus",
      "babi",
      "bacol",
      "bacot",
      "bagong",
      "bajingan",
      "balegug",
      "banci",
      "bangke",
      "bangsat",
      "bedebah",
      "bedegong",
      "bego",
      "belegug",
      "beloon",
      "bencong",
      "bloon",
      "blo'on",
      "bodoh",
      "boloho",
      "buduk",
      "budug",
      "celeng",
      "cibai",
      "cibay",
      "cocot",
      "cocote",
      "cok",
      "cokil",
      "colai",
      "colay",
      "coli",
      "colmek",
      "conge",
      "congean",
      "congek",
      "congor",
      "cuk",
      "cukima",
      "cukimai",
      "cukimay",
      "dancok",
      "entot",
      "entotan",
      "ewe",
      "ewean",
      "gelo",
      "genjik",
      "germo",
      "gigolo",
      "goblo",
      "goblog",
      "goblok",
      "hencet",
      "henceut",
      "heunceut",
      "homo",
      "idiot",
      "itil",
      "jancuk",
      "jancok",
      "jablay",
      "jalang",
      "jembut",
      "jiancok",
      "jilmek",
      "jurig",
      "kacung",
      "kampang",
      "kampret",
      "kampungan",
      "kehed",
      "kenthu",
      "kentot",
      "kentu",
      "keparat",
      "kimak",
      "kintil",
      "kirik",
      "kunyuk",
      "kurap",
      "konti",
      "kontol",
      "kopet",
      "koplok",
      "lacur",
      "lebok",
      "lonte",
      "maho",
      "meki",
      "memek",
      "monyet",
      "ndas",
      "ndasmu",
      "ngehe",
      "ngentot",
      "nggateli",
      "nyepong",
      "ngewe",
      "ngocok",
      "pante",
      "pantek",
      "patek",
      "pathek",
      "peju",
      "pejuh",
      "pecun",
      "pecundang",
      "pelacur",
      "pelakor",
      "peler",
      "pepek",
      "puki",
      "pukima",
      "pukimae",
      "pukimak",
      "pukimay",
      "sampah",
      "sepong",
      "sial",
      "sialan",
      "silit",
      "sinting",
      "sontoloyo",
      "tai",
      "taik",
      "tempek",
      "tempik",
      "tete",
      "tetek",
      "tiembokne",
      "titit",
      "toket",
      "tolol",
      "ublag",
      "udik",
      "wingkeng"
    ];
  }
});

// node_modules/indonesian-badwords/src/main.js
var require_main = __commonJS({
  "node_modules/indonesian-badwords/src/main.js"(exports, module) {
    module.exports = {
      dict: require_dict(),
      flag(text) {
        if (!text) throw new Error("empty string passed");
        if (typeof text !== "string") throw new Error("string expected");
        return this.dict.some((word) => text.toLowerCase().includes(word));
      },
      badwords(text) {
        if (!text) throw new Error("empty string passed");
        if (typeof text !== "string") throw new Error("string expected");
        return this.dict.filter((word) => text.toLowerCase().includes(word));
      },
      filter(text) {
        if (!text) throw new Error("empty string passed");
        if (typeof text !== "string") throw new Error("string expected");
        const regex = new RegExp(`\\b(${this.dict.join("|")})\\b`, "gi");
        return text.replace(regex, "");
      },
      censor(text, replacement = "***") {
        if (!text) throw new Error("empty string passed");
        if (typeof text !== "string") throw new Error("string expected");
        const regex = new RegExp(`\\b(${this.dict.join("|")})\\b`, "gi");
        return text.replace(regex, replacement);
      },
      analyze(text) {
        if (!text) throw new Error("empty string passed");
        if (typeof text !== "string") throw new Error("string expected");
        const badwords = this.dict.filter((word) => text.toLowerCase().includes(word));
        const words = text.split(" ");
        const count = badwords.length;
        const locations = badwords.map((word) => {
          const index = text.toLowerCase().indexOf(word);
          return {
            word,
            index
          };
        });
        const censored = this.censor(text);
        return {
          text,
          words: words.length,
          censored,
          badwords,
          count,
          locations
        };
      }
    };
  }
});
export default require_main();
//# sourceMappingURL=indonesian-badwords.js.map
